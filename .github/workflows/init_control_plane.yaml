name: Init Control Plane

on:
  workflow_call:
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      EC2_SSH_KEY:
        required: true
      TELEGRAM_TOKEN:
        required: true
      TELEGRAM_TOKEN_DEV:
        required: true
      PAT_GIT:
        required: true

permissions:
  contents: write

jobs:
  init_control_plane:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name : get host name
        run: |
          cd tf
          terraform init
          echo "CONTROL_PLANE_IP=$(terraform output -raw control_plane_public_ip)" >> $GITHUB_ENV
          cd ..

      - name: Configure SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          echo "Control plane IP is $CONTROL_PLANE_IP"
          echo "EC2 Username is ubuntu"
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/private_key
          chmod 600 ~/.ssh/private_key
          cat > ~/.ssh/config <<EOF
          Host ec2
              HostName $CONTROL_PLANE_IP
              User ubuntu
              IdentityFile ~/.ssh/private_key
              StrictHostKeyChecking no
          EOF

      - name: Install boto3
        working-directory: tf
        run: pip3 install boto3 pyyaml

      - name: Test Python logging
        working-directory: tf
        run: python3 test_log.py

      - name: Copy and Run Init Script on Control Plane
        working-directory:
          tf
        env:
          PYTHONUNBUFFERED: 1
        run: |
          chmod +x cp_init.sh
          TELEGRAM_TOKEN_DEV="${{ secrets.TELEGRAM_TOKEN_DEV }}"
          TELEGRAM_TOKEN="${{ secrets.TELEGRAM_TOKEN }}"
          DEV_BUCKET_ID=$(terraform output -raw s3_bucket_id_dev)
          PROD_BUCKET_ID=$(terraform output -raw s3_bucket_id_prod)
          DEV_SQS_URL=$(terraform output -raw sqs_queue_url_dev)
          PROD_SQS_URL=$(terraform output -raw sqs_queue_url_prod)
          echo "Running Python script with extracted values..."
          
          scp cp_init.sh ec2:/home/ubuntu/
          ssh ec2 "TELEGRAM_TOKEN_DEV='$TELEGRAM_TOKEN_DEV' \
          GITHUB_PAT='${{ secrets.PAT_GIT }}' \
          TELEGRAM_TOKEN='$TELEGRAM_TOKEN' \
          DEV_BUCKET_ID='$DEV_BUCKET_ID' \
          PROD_BUCKET_ID='$PROD_BUCKET_ID' \
          DEV_SQS_URL='$DEV_SQS_URL' \
          PROD_SQS_URL='$PROD_SQS_URL' \
          bash -c '~/cp_init.sh'"

      - name: deploy argoCD
        working-directory: argoCD_main
        run: |
          scp app_for_apps.yaml ec2:/home/ubuntu/
          ssh ec2 "kubectl apply -f ~/app_for_apps.yaml"
##
#
#      - name: depoly polybot_dev
#        env:
#          PYTHONUNBUFFERED: 1
#        run: |
#            python3 change_yaml.py --src polybot-k8s/polybot-dev/polybot.yaml --dest polybot-k8s/polybot-dev/polybot.yaml --ssm /majd/dev/polybot_image_name --region eu-west-1
#            git config --global user.name "github-actions[bot]"
#            git config --global user.email "github-actions[bot]@users.noreply.github.com"
#            git add polybot-k8s/polybot-dev/polybot.yaml
#            git commit -m "Update polybot-dev YAML with latest image from SSM" || echo "No changes to commit"
#            git push origin HEAD:${{ github.ref }}
